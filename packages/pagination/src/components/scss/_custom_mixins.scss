@mixin make-navlinks(
  $padding-horz: .5rem,
  $padding-vert: 0,
  $direction: 'horz',
  $color: inherit
) {
  margin: 0;
  padding: 0;
  list-style: none;
  display: flex;
  //flex-direction: row;

  > li {
    padding: $padding-vert $padding-horz;
    > a {
      display: inline-block;
      color: #{$color}
    }
    &:first-child > a {
      padding-left: 0;
    }
    &:last-child > a {
      padding-right: 0;
    }
  }
}

@mixin horz-menu(
  $padding: 12px,
  $addBorder: true,
  $borderColor: $black,
  $float: false,
  $color: inherit
) {
  list-style: none;
  margin: 0;
  padding: 0;

  > li {
    display: inline-block;
    padding: 0 $padding;
    @if ("#{$padding} == 0") {
      line-height: 1rem;
    }
    @if $float {
      float: $float;
    }
    @if $addBorder {
      border-right: 1px solid #{$borderColor};
      &:last-child {
        border: none;
      }
    }
    a {
      display: inline-block;
      color: #{$color}
      //padding: 0 $padding;
    }
    &:first-child, &:first-child a {
      padding-left: 0;
    }
    &:last-child, &:last-child a {
      padding-right: 0;
    }

  }
}

@mixin vert-menu(
  $padding: 1rem,
  $addBorder: true,
  $borderColor: $black,
  $backgroundColor: transparent,
  $hoverColor: true,
  $color: inherit
) {
  list-style: none;
  margin: 0;
  padding: 0;

  li {
    a {
      display: block;
      background-color: #{$backgroundColor};
      color: #{$color};
      padding: #{$padding};
      @if $addBorder {
        border-bottom: 1px solid #{$borderColor};
      }
      @if $hoverColor {
        &:hover, &.is-active {
          background-color: lighten($backgroundColor, 15%);
        }
      }
    }
    &:last-child a {
      border: 0;
    }
    //&:first-child, &:first-child a {
    //  padding-left: 0;
    //}
    //&:last-child, &:last-child a {
    //  padding-right: 0;
    //}

  }
}

@mixin make-pullquote($size: 60px, $color: $logo-color, $entity: '\201C') {
  border: none;
  padding: 0;
  position: relative;
  &::before {
    content: "#{$entity}";
    position: absolute;
    top: -20px;
    left: -23px;
    font-size: #{$size};
    color: #{$color};
  }
}

@mixin addSubmenu($ul-width: 100%, $form-width: 350px, $float: left) {
  @include clearfix;
  font-family: 'Montserrat', sans-serif;
  background: $submenu-background;
  ul {
    height: 40px;
    list-style: none;
    padding: 15px 15px 16px 0;
    float: #{$float};
    width: #{$ul-width};
    //    text-align: right;
    li {
      display: inline-block;
      border-left: 1px solid #eee;
      line-height: 13px;
      padding: 0 16px;
      &:first-child {border: none;}
    }
    a {
      color: #eee;
      font-size: 13px;
      line-height: 13px;
      text-transform: uppercase;
      outline: none;
      &.active, &:hover {
        text-decoration: none;
        padding-bottom: 3px;
        border-bottom: 4px solid $logo-color;
      }
    }
  }
  .search-form {
    float: right;
    width: #{$form-width};
    margin-top: 7px;
    button {
      display: none;
    }
  }
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}

/// Returns the opposite direction of each direction in a list
/// @author Hugo Giraudel
/// @param {List} $directions - List of initial directions
/// @return {List} - List of opposite directions
@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    'top':    'bottom',
    'right':  'left',
    'bottom': 'top',
    'left':   'right',
    'center': 'center',
    'ltr':    'rtl',
    'rtl':    'ltr'
  );

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }

  @return $opposite-directions;
}
