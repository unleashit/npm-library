"use strict";(self.webpackChunk_unleashit_docs=self.webpackChunk_unleashit_docs||[]).push([[18],{297:(e,s,n)=>{n.d(s,{Ay:()=>d,RM:()=>t});var r=n(5723),o=n(1373);const t=[];function a(e){const s={a:"a",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(s.p,{children:["You can easily customize the form fields, attribute, behavior and more my supplying a custom fields object and a zod schema to match. See ",(0,r.jsx)(s.a,{href:"/custom-fields",children:"Custom Fields"})," for more info."]})}function d(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},4586:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>m,default:()=>x,frontMatter:()=>p,metadata:()=>u,toc:()=>f});var r=n(5723),o=n(1373),t=n(6196),a=n(7867),d=n(297),i=n(6810),l=n(4950),c=n(6132);const p={title:"Forgot Password",description:"Customizable React forgot password component"},m=void 0,u={id:"components/forgotPassword",title:"Forgot Password",description:"Customizable React forgot password component",source:"@site/docs/components/forgotPassword.mdx",sourceDirName:"components",slug:"/components/forgotPassword",permalink:"/npm-library/components/forgotPassword",draft:!1,unlisted:!1,editUrl:"https://github.com/unleashit/npm-library/tree/master/shared/docs/docs/components/forgotPassword.mdx",tags:[],version:"current",frontMatter:{title:"Forgot Password",description:"Customizable React forgot password component"},sidebar:"tutorialSidebar",previous:{title:"Async Handler",permalink:"/npm-library/components/asyncHandler"},next:{title:"Login",permalink:"/npm-library/components/login"}},h={},f=[{value:"Features",id:"features",level:3},{value:"Demo",id:"demo",level:3},{value:"Install",id:"install",level:3},{value:"Password Reset Request Example",id:"password-reset-request-example",level:3},{value:"Password Reset Example",id:"password-reset-example",level:3},{value:"Custom Fields",id:"custom-fields",level:3},...d.RM,{value:"CSS",id:"css",level:3},...i.RM,{value:"CSS Custom Properties",id:"css-custom-properties",level:3},...l.RM,{value:"Dark mode",id:"dark-mode",level:3},...c.RM,{value:"API",id:"api",level:3}];function g(e){const s={a:"a",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"Customizable set of React forgot password components that validate against a default or custom Zod schema. Accepts custom fields and includes reset request, token submission and confirmation views as needed."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://raw.githubusercontent.com/unleashit/npm-library/master/packages/forgotPassword/forgotPassword.png",alt:"forgot password component"})}),"\n",(0,r.jsx)(s.h3,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Displays and handles client and serverside errors"}),"\n",(0,r.jsx)(s.li,{children:"Custom fields and schema"}),"\n",(0,r.jsx)(s.li,{children:"Show success components and/or provide onSuccess functions to redirect, set state, etc."}),"\n",(0,r.jsx)(s.li,{children:"Custom header/footer"}),"\n",(0,r.jsx)(s.li,{children:"Loader (default or custom)"}),"\n",(0,r.jsx)(s.li,{children:"Show a link to login instead"}),"\n",(0,r.jsx)(s.li,{children:"Client router support for links"}),"\n",(0,r.jsx)(s.li,{children:"Toast support"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"demo",children:"Demo"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://npm-library-demo.vercel.app/forgot-password",children:"https://npm-library-demo.vercel.app/forgot-password"})}),"\n",(0,r.jsx)(s.h3,{id:"install",children:"Install"}),"\n",(0,r.jsxs)(t.A,{groupId:"npm2yarn",children:[(0,r.jsx)(a.A,{value:"npm",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"npm install @unleashit/forgot-password\n"})})}),(0,r.jsx)(a.A,{value:"yarn",label:"Yarn",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"yarn add @unleashit/forgot-password\n"})})}),(0,r.jsx)(a.A,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"pnpm add @unleashit/forgot-password\n"})})})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Peer dependencies:"})," react, react-hook-form, @hookform/resolvers and zod."]}),"\n",(0,r.jsx)(s.h3,{id:"password-reset-request-example",children:"Password Reset Request Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"import ForgotPassword, {\n  FormValues,\n  ServerResponse,\n} from '@unleashit/forgot-password';\n\nfunction ForgotPasswordDemo() {\n  const forgotPasswordHandler = async (\n    values: FormValues,\n  ): Promise<ServerResponse> => {\n    // server should return a ServerResponse\n    // success property of true indicates all validations pass\n    // errors named after field names will display with fields\n    // error with property of \"root\" will display at the top or sent to toast\n    return await fetch('https://api.example.com/forgot-password', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(values),\n    }).then((resp) => resp.json());\n  };\n\n  const onSuccess = (resp: ServerResponse) => {\n    // Redirect or set state, etc.\n    // resp has full server response from forgotPasswordHandler()\n    console.log(resp);\n  };\n\n  return (\n    <ForgotPassword handler={forgotPasswordHandler} onSuccess={onSuccess} />\n  );\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Note that ",(0,r.jsx)(s.code,{children:"onSuccess"})," is optional. By default, the user will be shown a generic success message as long as the server returns a ",(0,r.jsx)(s.code,{children:"success"})," boolean. If you provide an ",(0,r.jsx)(s.code,{children:"successMessage"})," prop, you can override it or set ",(0,r.jsx)(s.code,{children:"false"})," to turn off."]}),"\n",(0,r.jsx)(s.h3,{id:"password-reset-example",children:"Password Reset Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",metastring:"jsx",children:"import ForgotPasswordReset, {\n  FormValuesReset,\n  ServerResponseReset,\n} from '@unleashit/forgot-password';\n\nfunction ForgotPasswordResetDemo() {\n  const forgotPasswordResetHandler = async (\n    values: FormValuesReset,\n  ): Promise<ServerResponseReset> => {\n    // userID and token are extracted from url\n    const [token, userid] = new URL(window.location.href).pathname\n      .split('/')\n      .filter(Boolean)\n      .reverse();\n\n    return await fetch(\n      `https://api.example.com/forgot-password/${userid}/${token}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(values),\n      },\n    ).then((resp) => resp.json());\n  };\n\n  const onSuccess = (resp: ServerResponseReset) => {\n    console.log(resp);\n  };\n\n  return (\n    <ForgotPasswordReset\n      handler={forgotPasswordResetHandler}\n      onSuccess={onSuccess}\n    />\n  );\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["In this example, the userId and authorization token are taken from the url under the assumption the user arrived from a link sent via email or SMS. By default (can be customized or turned off with a ",(0,r.jsx)(s.code,{children:"successMessage"})," prop), a success message will be shown to the user if the server returns a positive response with no errors."]}),"\n",(0,r.jsx)(s.h3,{id:"custom-fields",children:"Custom Fields"}),"\n",(0,r.jsx)(d.Ay,{}),"\n",(0,r.jsx)(s.h3,{id:"css",children:"CSS"}),"\n",(0,r.jsx)(i.Ay,{name:p.title}),"\n",(0,r.jsx)(s.h3,{id:"css-custom-properties",children:"CSS Custom Properties"}),"\n",(0,r.jsx)(l.Ay,{}),"\n",(0,r.jsx)(s.h3,{id:"dark-mode",children:"Dark mode"}),"\n",(0,r.jsx)(c.Ay,{}),"\n",(0,r.jsx)(s.h3,{id:"api",children:"API"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"ForgotPasswordProps"})," (extends ",(0,r.jsx)(s.code,{children:"BaseFormProps"}),")"]})}),"\n",(0,r.jsx)(s.p,{children:"Props for forgot password request."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",metastring:"file=./packages/forgotPassword/src/forgotPassword.tsx start=mdx_fp_props_start end=mdx_fp_props_end",children:"export type ForgotPasswordProps = BaseFormProps & {\n  /**\n   * Override the login link inside the default header\n   * Note: if you provide a header prop, the login link will not appear\n   */\n  loginLink?: ComponentType | ReactNode;\n  /** CSS custom property overrides */\n  cssVars?: CSSVars<typeof varNames>;\n  /** Position of children */\n  childrenPosition?: 'top' | 'bottom';\n  /** Other content to display */\n  children?: ReactNode;\n};\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",metastring:"file=./shared/common/src/types.ts start=mdx_base_form_start end=mdx_base_form_end",children:"export type BaseFormProps = {\n  /** Handler to submit form. Receives form values and returns Promise with ServerResponse */\n  handler: <T extends ZodTypeAny>(\n    values: FormValues<T>,\n    event?: Event,\n  ) => Promise<BaseServerResponse<FormValues<T>>>;\n  /** Handler that fires upon successful server validation */\n  onSuccess?: <T extends ZodTypeAny, Meta extends Record<string, any>>(\n    resp: BaseServerResponse<FormValues<T>, Meta>,\n  ) => void;\n  /**\n   * Custom header component or\n   * false to disable the default header\n   */\n  header?: ComponentType<any> | ReactNode | false;\n  /** Header text for default header */\n  headerText?: string;\n  /** Custom loader component */\n  loader?: ComponentType<DefaultLoaderProps>;\n  /** Label for form submit button */\n  buttonText?: string;\n  /** Custom fields to override default fields */\n  customFields?: CustomField[];\n  /** Custom schema to override default schema */\n  customSchema?: z.ZodType<any, any, any>;\n  /**\n   * Optionally send root server error message and/or\n   * handler exceptions to toast\n   */\n  toast?: (msg: string) => void;\n  /** Override the default catch error shown to user */\n  failMsg?: string;\n  /** Override or remove the default success message */\n  successMessage?: ComponentType<any> | string | false;\n  /** Disable/override initial form focus if set */\n  isFocused?: boolean;\n  /**\n   * Boolean to toggle component's data-theme attribute\n   * between light and dark mode\n   */\n  darkMode?: boolean;\n  /** CSS module to target internal styles */\n  cssModule?: Record<string, string>;\n};\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"ForgotPasswordResetProps"})})}),"\n",(0,r.jsx)(s.p,{children:"Props for password reset."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",metastring:"file=./packages/forgotPassword/src/forgotPasswordReset.tsx start=mdx_fpreset_props_start end=mdx_fpreset_props_end",children:"export type ForgotPasswordResetProps = BaseFormProps & {\n  /** CSS custom property overrides */\n  cssVars?: CSSVars<typeof varNames>;\n  /** Position of children */\n  childrenPosition?: 'top' | 'bottom';\n  /** Other content to display */\n  children?: React.ReactNode;\n};\n"})})]})}function x(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);