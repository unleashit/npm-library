"use strict";(self.webpackChunk_unleashit_docs=self.webpackChunk_unleashit_docs||[]).push([[849],{297:(n,e,i)=>{i.d(e,{Ay:()=>l,RM:()=>a});var t=i(5723),s=i(1373);const a=[];function o(n){const e={a:"a",p:"p",...(0,s.R)(),...n.components};return(0,t.jsxs)(e.p,{children:["You can easily customize the form fields, attribute, behavior and more my supplying a custom fields object and a zod schema to match. See ",(0,t.jsx)(e.a,{href:"/custom-fields",children:"Custom Fields"})," for more info."]})}function l(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}},9722:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>u,contentTitle:()=>h,default:()=>x,frontMatter:()=>d,metadata:()=>p,toc:()=>g});var t=i(5723),s=i(1373),a=i(6196),o=i(7867),l=(i(297),i(6810)),r=i(4950),c=i(6132);const d={title:"Navigation",description:"Customizable React navigation component"},h=void 0,p={id:"components/navigation",title:"Navigation",description:"Customizable React navigation component",source:"@site/docs/components/navigation.mdx",sourceDirName:"components",slug:"/components/navigation",permalink:"/npm-library/components/navigation",draft:!1,unlisted:!1,editUrl:"https://github.com/unleashit/npm-library/tree/master/shared/docs/docs/components/navigation.mdx",tags:[],version:"current",frontMatter:{title:"Navigation",description:"Customizable React navigation component"},sidebar:"tutorialSidebar",previous:{title:"Modal",permalink:"/npm-library/components/modal"},next:{title:"Pagination",permalink:"/npm-library/components/pagination"}},u={},g=[{value:"Features",id:"features",level:3},{value:"Demo",id:"demo",level:3},{value:"Install",id:"install",level:3},{value:"Example without auth links",id:"example-without-auth-links",level:3},{value:"Authenticated Links",id:"authenticated-links",level:3},{value:"Login/Logout/Signup Sidecar",id:"loginlogoutsignup-sidecar",level:3},{value:"Default Themes",id:"default-themes",level:3},{value:"CSS",id:"css",level:3},...l.RM,{value:"CSS Custom Properties",id:"css-custom-properties",level:3},...r.RM,{value:"Dark mode",id:"dark-mode",level:3},...c.RM,{value:"API",id:"api",level:3}];function m(n){const e={a:"a",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"Customizable navigation component for React. Comes with optional sidecar component for login/logout/signup."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://raw.githubusercontent.com/unleashit/npm-library/master/packages/navigation/navigation-horz.png",alt:"navigation component screenshot"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://raw.githubusercontent.com/unleashit/npm-library/master/packages/navigation/navigation-horz-alt.png",alt:"navigation component screenshot"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://raw.githubusercontent.com/unleashit/npm-library/master/packages/navigation/navigation-vert.png",alt:"navigation component screenshot"})}),"\n",(0,t.jsx)(e.h3,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Lightweight UI component. Send it a list of links and options, and it will render the html."}),"\n",(0,t.jsx)(e.li,{children:"Horizontal or Vertical display."}),"\n",(0,t.jsx)(e.li,{children:"Can independently control display state of each link."}),"\n",(0,t.jsx)(e.li,{children:"Optional login/logout/signup sidecar can be positioned independently from main links."}),"\n",(0,t.jsx)(e.li,{children:"Accepts custom attributes per link."}),"\n",(0,t.jsx)(e.li,{children:"Several CSS themes to choose, or make your own."}),"\n",(0,t.jsx)(e.li,{children:"CSS module support can override internal styles with a custom module."}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"demo",children:"Demo"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://npm-library-demo.vercel.app/navigation",children:"https://npm-library-demo.vercel.app/navigation"})}),"\n",(0,t.jsx)(e.h3,{id:"install",children:"Install"}),"\n",(0,t.jsxs)(a.A,{groupId:"npm2yarn",children:[(0,t.jsx)(o.A,{value:"npm",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm install @unleashit/navigation\n"})})}),(0,t.jsx)(o.A,{value:"yarn",label:"Yarn",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"yarn add @unleashit/navigation\n"})})}),(0,t.jsx)(o.A,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pnpm add @unleashit/navigation\n"})})})]}),"\n",(0,t.jsx)(e.h3,{id:"example-without-auth-links",children:"Example without auth links"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"const links: NavigationLink[] = [\n  {\n    title: 'Home',\n    href: '/home',\n  },\n  {\n    title: 'Products',\n    href: '/products',\n  },\n  {\n    title: 'About',\n    href: '/about-us',\n  },\n  {\n    title: 'Partner Site',\n    href: 'https://example.com',\n    attrs: {\n      target: '_blank',\n      rel: 'noopener noreferrer',\n    },\n  },\n];\n\nconst NavigationDemo = () => <Navigation links={links} />;\n\nexport default NavigationDemo;\n"})}),"\n",(0,t.jsx)(e.h3,{id:"authenticated-links",children:"Authenticated Links"}),"\n",(0,t.jsx)(e.p,{children:"You can manually manage the display state for each link with by adding a display property. Setting a display property will always override any managed link state the component does."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"const links: NavigationLink[] = [\n  {\n    title: 'Members Only',\n    href: '/members',\n    display: isLoggedIn && isMember, // boolean\n  },\n];\n"})}),"\n",(0,t.jsx)(e.h3,{id:"loginlogoutsignup-sidecar",children:"Login/Logout/Signup Sidecar"}),"\n",(0,t.jsxs)(e.p,{children:["If you include an ",(0,t.jsx)(e.code,{children:"isAuth"})," and/or ",(0,t.jsx)(e.code,{children:"authLinks"})," prop, a sub-component with appear with authentication and signup links as appropriate. Use ",(0,t.jsx)(e.code,{children:"isAuth"})," if you have a simple prototype with standard login/logout/signup behavior. ",(0,t.jsx)(e.code,{children:"authLinks"})," is a customized version. Lastly if you prefer, you can integrate your auth buttons directly into the primary links using the display property to individually show/hide."]}),"\n",(0,t.jsxs)(e.p,{children:["If ",(0,t.jsx)(e.code,{children:"isAuth"})," is included and set to ",(0,t.jsx)(e.code,{children:"false"}),", both ",(0,t.jsx)(e.strong,{children:"login"})," and ",(0,t.jsx)(e.strong,{children:"signup"})," will show up. If true, ",(0,t.jsx)(e.strong,{children:"logout"})," instead."]}),"\n",(0,t.jsxs)(e.p,{children:["If you need to customize the titles, urls or anything about the auth links (you probably do), an ",(0,t.jsx)(e.code,{children:"authLinks"})," prop is required. ",(0,t.jsx)(e.code,{children:"authLinks"})," should be an object with ",(0,t.jsx)(e.code,{children:"login"}),", ",(0,t.jsx)(e.code,{children:"logout"})," and ",(0,t.jsx)(e.code,{children:"signup"})," properties each containing a ",(0,t.jsx)(e.code,{children:"NavigationLink"})," object (see ",(0,t.jsx)(e.code,{children:"NavigationLink"})," below)."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"interface AuthLinkTypes {\n  login?: NavigationLink;\n  logout?: NavigationLink;\n  signup?: NavigationLink;\n}\n\nconst authLinks: AuthLinkTypes = {\n  login: {\n    title: 'Sign In',\n    href: '/login',\n  },\n  logout: {\n    title: 'Logout',\n    href: '/logout',\n  },\n  signup: {\n    title: 'Register',\n    href: '/signup',\n    icon: '/images/login-icon.svg',\n    iconPosition: 'right', // left is default\n  },\n};\n\n<Navigation\n  links={links}\n  authLinks={authLinks}\n  isAuth={false}\n  template=\"light-buttons\"\n/>;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Note: If you add ",(0,t.jsx)(e.code,{children:"authlinks"}),", including ",(0,t.jsx)(e.code,{children:"isAuth"})," is optional. Including it is a simple way to control display state, but you can also choose to manage individually per link if you prefer:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"const authLinks: AuthLinkTypes = {\n  login: {\n    display: !isLoggedIn,\n    // you can leave off any props if you like the defaults\n  },\n  logout: {\n    display: isLoggedIn,\n  },\n  signup: {\n    display: false, // never display signup\n  },\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"default-themes",children:"Default Themes"}),"\n",(0,t.jsxs)(e.p,{children:["If you include the default CSS, you can choose from a few basic themes by setting the ",(0,t.jsx)(e.code,{children:"template"})," prop:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"clean"}),": clean style. This is the default"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"light-buttons"}),": light buttons style"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"dark-buttons"}),": dark buttons style"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"plain"}),": no style (same as not adding the CSS but it adds a class called ",(0,t.jsx)(e.code,{children:"plain"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["You can also set the direction to be ",(0,t.jsx)(e.code,{children:"horizontal"})," or ",(0,t.jsx)(e.code,{children:"vertical"})," with the ",(0,t.jsx)(e.code,{children:"direction"})," prop. The themes are designed to work in either direction."]}),"\n",(0,t.jsxs)(e.p,{children:["Lastly, you can optionally add an icon to any link by setting the ",(0,t.jsx)(e.code,{children:"icon"})," and ",(0,t.jsx)(e.code,{children:"iconPosition"})," props. Depending on the icon dimensions, you may or may not have to tweak the CSS to get the right results."]}),"\n",(0,t.jsx)(e.h3,{id:"css",children:"CSS"}),"\n",(0,t.jsx)(l.Ay,{name:d.title}),"\n",(0,t.jsx)(e.h3,{id:"css-custom-properties",children:"CSS Custom Properties"}),"\n",(0,t.jsx)(r.Ay,{}),"\n",(0,t.jsx)(e.h3,{id:"dark-mode",children:"Dark mode"}),"\n",(0,t.jsx)(c.Ay,{}),"\n",(0,t.jsx)(e.h3,{id:"api",children:"API"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"NavigationProps"})})}),"\n",(0,t.jsx)(e.p,{children:"Props for the Navigation component."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",metastring:"file=./packages/navigation/src/navigation.tsx start=mdx_navigation_props_start end=mdx_navigation_props_end",children:"export interface NavigationProps {\n  /** Object with links configuration */\n  links: NavigationLink[];\n  /**\n   * Optional client router component.\n   * When supplied, links will be constructed with it.\n   * By default, links will be HTML anchor tags.\n   */\n  linkComponent?: ComponentType<any>;\n  /**\n   * Designate a non-standard href prop if the Router\n   * uses one. Example: React Router Link uses \"to\"\n   */\n  linkComponentHrefAttr?: string;\n  /** Vertical or horizontal links */\n  direction?: 'horizontal' | 'vertical' | 'horz' | 'vert';\n  /** Choice of template */\n  template?: 'clean' | 'light-buttons' | 'dark-buttons' | 'none';\n  /** Optional CSS classes to add to Navigation container */\n  classes?: string[];\n  /**\n   * Show the auth sidecar. When set to true, a logged in state\n   * false logged out. Omit or set undefined to not display\n   */\n  isAuth?: boolean;\n  /** Customize the auth sidecar */\n  authLinks?: AuthLinkTypes;\n  /**\n   * Boolean to toggle component's data-theme attribute\n   * between light and dark mode\n   */\n  darkMode?: boolean;\n  /** CSS custom property overrides */\n  cssVars?: CSSVars<typeof varNames>;\n  /** CSS module to target internal styles */\n  cssModule?: Record<string, string>;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"NavigationLink"})})}),"\n",(0,t.jsx)(e.p,{children:"Individual navigation links."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",metastring:"file=./packages/navigation/src/types.ts start=mdx_navigation_link_start end=mdx_navigation_link_end",children:"export interface NavigationLink {\n  href: string;\n  title: string;\n  active?: boolean;\n  classes?: string[];\n  style?: React.CSSProperties;\n  icon?: string;\n  iconPosition?: 'left' | 'right';\n  display?: boolean;\n  attrs?: React.AllHTMLAttributes<any>;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:"AuthLinkTypes"})})}),"\n",(0,t.jsxs)(e.p,{children:["AuthLinks are an object with ",(0,t.jsx)(e.code,{children:"login"}),", ",(0,t.jsx)(e.code,{children:"logout"})," and/or ",(0,t.jsx)(e.code,{children:"signup"})," keys. Each value is a ",(0,t.jsx)(e.code,{children:"NavigationLink"}),". The display titles can be changed by setting the ",(0,t.jsx)(e.code,{children:"title"})," in each ",(0,t.jsx)(e.code,{children:"NavigationLink"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",metastring:"file=./packages/navigation/src/types.ts start=mdx_navigation_authlink_start end=mdx_navigation_authlink_end",children:"export interface AuthLinkTypes {\n  login?: NavigationLink;\n  logout?: NavigationLink;\n  signup?: NavigationLink;\n}\n"})})]})}function x(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}}}]);