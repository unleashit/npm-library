"use strict";(self.webpackChunk_unleashit_docs=self.webpackChunk_unleashit_docs||[]).push([[275],{9240:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>x,frontMatter:()=>c,metadata:()=>h,toc:()=>g});var a=t(5723),i=t(1373),s=t(6196),r=t(7867),o=t(6810),l=t(4950),d=t(6132);const c={title:"Pagination",description:"Customizable React pagination component"},p=void 0,h={id:"components/pagination",title:"Pagination",description:"Customizable React pagination component",source:"@site/docs/components/pagination.mdx",sourceDirName:"components",slug:"/components/pagination",permalink:"/npm-library/components/pagination",draft:!1,unlisted:!1,editUrl:"https://github.com/unleashit/npm-library/tree/master/shared/docs/docs/components/pagination.mdx",tags:[],version:"current",frontMatter:{title:"Pagination",description:"Customizable React pagination component"},sidebar:"tutorialSidebar",previous:{title:"Navigation",permalink:"/npm-library/components/navigation"},next:{title:"Quick Form",permalink:"/npm-library/components/quickForm"}},m={},g=[{value:"Features",id:"features",level:2},{value:"Demo",id:"demo",level:3},{value:"Install",id:"install",level:3},{value:"Example",id:"example",level:3},{value:"CSS",id:"css",level:3},...o.RM,{value:"CSS Custom Properties",id:"css-custom-properties",level:3},...l.RM,{value:"Dark mode",id:"dark-mode",level:3},...d.RM,{value:"API",id:"api",level:3}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Responsive pagination component for React. Just give it a total number of items and the current offset. It then calls a handler with the new offset as needed."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://github.com/unleashit/npm-library/raw/master/packages/pagination/pagination.png",alt:"pagination component"})}),"\n",(0,a.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Lightweight UI component. Doesn't care about data, caching or state. Send it the total items and current offset, and it renders the correct interface."}),"\n",(0,a.jsx)(n.li,{children:"Responsive, with a container query to show the right amount of pages"}),"\n",(0,a.jsx)(n.li,{children:"Gracefully supports unlimited pages"}),"\n",(0,a.jsx)(n.li,{children:"Automatically hides next/prev buttons when not needed"}),"\n",(0,a.jsx)(n.li,{children:"Customizable labels"}),"\n",(0,a.jsx)(n.li,{children:"Default CSS with light/dark mode available"}),"\n",(0,a.jsx)(n.li,{children:"CSS module support can override internal styles with a custom module"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"demo",children:"Demo"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://npm-library-demo.vercel.app/pagination",children:"https://npm-library-demo.vercel.app/pagination"})}),"\n",(0,a.jsx)(n.h3,{id:"install",children:"Install"}),"\n",(0,a.jsxs)(s.A,{groupId:"npm2yarn",children:[(0,a.jsx)(r.A,{value:"npm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @unleashit/pagination\n"})})}),(0,a.jsx)(r.A,{value:"yarn",label:"Yarn",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"yarn add @unleashit/pagination\n"})})}),(0,a.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm add @unleashit/pagination\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport Pagination from '@unleashit/pagination';\nimport Articles from './Articles';\nimport { getTotalRowsFromDB, getPageFromDB } from './api';\n\nconst perPage = 10;\n\nfunction PaginationDemo() {\n  // The main thing you have to do is keep track of the changed offset\n  // Pagination doesn't care about the list data,\n  // only the current offset and total number of items\n  const [totalRows, setTotalRows] = useState<number>();\n  const [data, setData] = useState<any[]>();\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => {\n    // Basic example without caching or error handling\n    Promise.all([\n      // example to get the count(*) from the DB\n      getTotalRowsFromDB(),\n      // example to get a page of data starting at the offset\n      // and ending with the perPage amount\n      getPageFromDB({ offset, limit: perPage }),\n    ]).then(([total, page]) => {\n      setTotalRows(total);\n      setData(page);\n    });\n  }, [offset]);\n\n  // handler is called whenever the user clicks on a page, next or prev buttons\n  // and is provided the new offset corresponding with the button the user clicked.\n  // For example, if perPage is set to 10 and the user clicks page 3,\n  // the handler will be called with 20 (page 1 = 0, page 2 = 10, page 3 = 20, etc.).\n  const paginationHandler = (newOffset: number) => {\n    setOffset(newOffset);\n  };\n\n  if (!data) return <div>Loading...</div>;\n  if (!totalRows || !data.length) return <div>No items found.</div>;\n\n  return (\n    <>\n      <Articles data={data} />\n      <Pagination\n        currentOffset={offset}\n        perPage={perPage}\n        handler={paginationHandler}\n        total={totalRows}\n      />\n    </>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"css",children:"CSS"}),"\n",(0,a.jsx)(o.Ay,{name:c.title}),"\n",(0,a.jsx)(n.h3,{id:"css-custom-properties",children:"CSS Custom Properties"}),"\n",(0,a.jsx)(l.Ay,{}),"\n",(0,a.jsx)(n.h3,{id:"dark-mode",children:"Dark mode"}),"\n",(0,a.jsx)(d.Ay,{}),"\n",(0,a.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"PaginationProps"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"file=./packages/pagination/src/pagination.tsx start=mdx_pagination_props_start end=mdx_pagination_props_end",children:"export interface PaginationProps {\n  currentOffset: number;\n  handler: PaginationHandler;\n  total: number;\n  perPage?: number;\n  prevLabel?: string;\n  nextLabel?: string;\n  darkMode?: boolean;\n  cssVars?: CSSVars<typeof varNames>;\n  cssModule?: Record<string, string>;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"PaginationHandler"})})}),"\n",(0,a.jsx)(n.p,{children:"Handler to be called when user clicks a page or prev/next buttons. It will be provided the next offset based on their selection. Use it to change the displayed page."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",metastring:"file=./packages/pagination/src/pagination.tsx start=mdx_pagination_handler_start end=mdx_pagination_handler_end",children:"export type PaginationHandler = (newOffset: number) => void;\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);