"use strict";(self.webpackChunk_unleashit_docs=self.webpackChunk_unleashit_docs||[]).push([[322],{297:(e,n,s)=>{s.d(n,{Ay:()=>a,RM:()=>o});var r=s(5723),t=s(1373);const o=[];function i(e){const n={a:"a",p:"p",...(0,t.R)(),...e.components};return(0,r.jsxs)(n.p,{children:["You can easily customize the form fields, attribute, behavior and more my supplying a custom fields object and a zod schema to match. See ",(0,r.jsx)(n.a,{href:"/custom-fields",children:"Custom Fields"})," for more info."]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},2424:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>u,default:()=>f,frontMatter:()=>p,metadata:()=>m,toc:()=>g});var r=s(5723),t=s(1373),o=s(6196),i=s(7867),a=s(297),l=s(6810),d=s(4950),c=s(6132);const p={title:"Signup",description:"Customizable React signup component"},u=void 0,m={id:"components/signup",title:"Signup",description:"Customizable React signup component",source:"@site/docs/components/signup.mdx",sourceDirName:"components",slug:"/components/signup",permalink:"/npm-library/components/signup",draft:!1,unlisted:!1,editUrl:"https://github.com/unleashit/npm-library/tree/master/shared/docs/docs/components/signup.mdx",tags:[],version:"current",frontMatter:{title:"Signup",description:"Customizable React signup component"},sidebar:"tutorialSidebar",previous:{title:"Recursive Data Lister",permalink:"/npm-library/components/recursiveDataLister"},next:{title:"Custom Fields",permalink:"/npm-library/custom-fields"}},h={},g=[{value:"Features",id:"features",level:3},{value:"Demo",id:"demo",level:3},{value:"Install",id:"install",level:3},{value:"Example",id:"example",level:3},{value:"Social Sign up",id:"social-sign-up",level:3},{value:"Custom Fields",id:"custom-fields",level:3},...a.RM,{value:"CSS",id:"css",level:3},...l.RM,{value:"CSS Custom Properties",id:"css-custom-properties",level:3},...d.RM,{value:"Dark mode",id:"dark-mode",level:3},...c.RM,{value:"API",id:"api",level:3}];function x(e){const n={a:"a",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Customizable React signup component that validates against a default or custom Zod schema."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/unleashit/npm-library/master/packages/signup/signup.png",alt:"signup component"})}),"\n",(0,r.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Displays and handles client and serverside errors"}),"\n",(0,r.jsx)(n.li,{children:"Custom fields and schema"}),"\n",(0,r.jsx)(n.li,{children:"Show a success component and/or provide an onSuccess function to redirect, set state, etc."}),"\n",(0,r.jsx)(n.li,{children:"Show social logins either above or below email signup with optional separator"}),"\n",(0,r.jsx)(n.li,{children:"Custom header/footer"}),"\n",(0,r.jsx)(n.li,{children:"Loader (default or custom)"}),"\n",(0,r.jsx)(n.li,{children:"Show a link to login"}),"\n",(0,r.jsx)(n.li,{children:"Client router support for links"}),"\n",(0,r.jsx)(n.li,{children:"Toast support"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"demo",children:"Demo"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://npm-library-demo.vercel.app/signup",children:"https://npm-library-demo.vercel.app/signup"})}),"\n",(0,r.jsx)(n.h3,{id:"install",children:"Install"}),"\n",(0,r.jsxs)(o.A,{groupId:"npm2yarn",children:[(0,r.jsx)(i.A,{value:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @unleashit/signup\n"})})}),(0,r.jsx)(i.A,{value:"yarn",label:"Yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @unleashit/signup\n"})})}),(0,r.jsx)(i.A,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @unleashit/signup\n"})})})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Peer dependencies:"})," react, react-hook-form, @hookform/resolvers and zod."]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"jsx",children:"import Signup, { FormValues, ServerResponse } from '@unleashit/signup';\nimport { useNavigate } from 'react-router-dom';\n\nfunction SignupDemo() {\n  const navigate = useNavigate();\n\n  const signupHandler = async (values: FormValues): Promise<ServerResponse> => {\n    // server should return a ServerResponse\n    // success property of true indicates all validations pass\n    // errors named after field names will display with fields\n    // error with property of \"root\" will display at the top or sent to toast\n    return await fetch('https://api.example.com/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(values),\n    }).then((resp) => resp.json());\n  };\n\n  const onSuccess = (resp: ServerResponse) => {\n    // Redirect or set auth state, etc.\n    // resp has full server response from signupHandler()\n    navigate('/');\n  };\n\n  return (\n    <Signup handler={signupHandler} onSuccess={onSuccess} />\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"social-sign-up",children:"Social Sign up"}),"\n",(0,r.jsx)(n.p,{children:"Adding social sign up buttons is easy. Simply include them as children and they will display (by default) under the main login with a nice separator."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"jsx",children:"import { GithubLoginButton, TwitterLoginButton } from 'react-social-login-buttons';\n\n<Signup handler={/* ... */}>\n  <TwitterLoginButton onClick={() => alert('Hello')}>\n    Sign up with Twitter\n  </TwitterLoginButton>\n  <GithubLoginButton onClick={() => alert('Hello')}>\n    Sign up with Github\n  </GithubLoginButton>\n</Signup>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-fields",children:"Custom Fields"}),"\n",(0,r.jsx)(a.Ay,{}),"\n",(0,r.jsx)(n.h3,{id:"css",children:"CSS"}),"\n",(0,r.jsx)(l.Ay,{name:p.title}),"\n",(0,r.jsx)(n.h3,{id:"css-custom-properties",children:"CSS Custom Properties"}),"\n",(0,r.jsx)(d.Ay,{}),"\n",(0,r.jsx)(n.h3,{id:"dark-mode",children:"Dark mode"}),"\n",(0,r.jsx)(c.Ay,{}),"\n",(0,r.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"SignupProps"})})," (extends ",(0,r.jsx)(n.code,{children:"BaseFormProps"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Props for the Signup component. SignupFormProps extends BaseFormProps. The only required prop is ",(0,r.jsx)(n.code,{children:"handler"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"file=./packages/signup/src/signup.tsx start=mdx_signup_props_start end=mdx_signup_props_end",children:"export type SignupProps = BaseFormProps & {\n  /**\n   * Override the login link inside the default header\n   * Note: if you provide a header prop, the login link will not appear\n   */\n  loginLink?: ComponentType | ReactNode;\n  /**\n   * Add a separator between email and\n   * social logins  (children required)\n   */\n  orLine?: boolean;\n  /** CSS custom property overrides */\n  cssVars?: CSSVars<typeof varNames>;\n  /** Position of children */\n  children?: ReactNode;\n  /** Social logins or other content to display */\n  childrenPosition?: 'top' | 'bottom';\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"file=./shared/common/src/types.ts start=mdx_base_form_start end=mdx_base_form_end",children:"export type BaseFormProps = {\n  /** Handler to submit form. Receives form values and returns Promise with ServerResponse */\n  handler: <T extends ZodTypeAny>(\n    values: FormValues<T>,\n    event?: Event,\n  ) => Promise<BaseServerResponse<FormValues<T>>>;\n  /** Handler that fires upon successful server validation */\n  onSuccess?: <T extends ZodTypeAny, Meta extends Record<string, any>>(\n    resp: BaseServerResponse<FormValues<T>, Meta>,\n  ) => void;\n  /**\n   * Custom header component or\n   * false to disable the default header\n   */\n  header?: ComponentType<any> | ReactNode | false;\n  /** Header text for default header */\n  headerText?: string;\n  /** Custom loader component */\n  loader?: ComponentType<DefaultLoaderProps>;\n  /** Label for form submit button */\n  buttonText?: string;\n  /** Custom fields to override default fields */\n  customFields?: CustomField[];\n  /** Custom schema to override default schema */\n  customSchema?: z.ZodType<any, any, any>;\n  /**\n   * Optionally send root server error message and/or\n   * handler exceptions to toast\n   */\n  toast?: (msg: string) => void;\n  /** Override the default catch error shown to user */\n  failMsg?: string;\n  /** Override or remove the default success message */\n  successMessage?: ComponentType<any> | string | false;\n  /** Disable/override initial form focus if set */\n  isFocused?: boolean;\n  /**\n   * Boolean to toggle component's data-theme attribute\n   * between light and dark mode\n   */\n  darkMode?: boolean;\n  /** CSS module to target internal styles */\n  cssModule?: Record<string, string>;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"ServerResponse"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"handler"})," function's promise should resolve a ",(0,r.jsx)(n.code,{children:"ServerResponse"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"file=./packages/signup/src/types.ts start=mdx_server_response_start end=mdx_server_response_end",children:"export type ServerResponse<\n  TFormValues extends Record<string, any> = FormValues,\n  Meta extends Record<string, any> = Record<string, any>,\n> = BaseServerResponse<TFormValues, Meta>;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"file=./shared/common/src/types.ts start=mdx_server_response_start end=mdx_server_response_end",children:"export type BaseServerResponse<\n  TFormValues extends Record<string, string | string[]> = Record<string, any>,\n  Meta extends Record<string, any> = Record<string, any>,\n> = {\n  /* success key informs client whether server validation passed or failed */\n  success: boolean;\n  /* errors only display if success=false */\n  errors?: {\n    /* Optional error msg to print in header\n     * or send to toast when server validation fails\n     */\n    root?: string | string[];\n    /*\n     * pass any failing formValues\n     * as key=name of field, value=message or array of messages to print\n     */\n  } & Partial<TFormValues>;\n} & Meta;\n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}}}]);